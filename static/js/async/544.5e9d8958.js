"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([["544"],{22934:function(t,e,r){r.d(e,{A:()=>i});var a,o=r(60697),i=(a=class{reset(){this.records=this.init()}constructor(t){this.init=t,this.records=this.init()}},(0,o.eW)(a,"ImperativeState"),a)},4732:function(t,e,r){function a(t,e){var r,a,o;t.accDescr&&(null===(r=e.setAccDescription)||void 0===r||r.call(e,t.accDescr)),t.accTitle&&(null===(a=e.setAccTitle)||void 0===a||a.call(e,t.accTitle)),t.title&&(null===(o=e.setDiagramTitle)||void 0===o||o.call(e,t.title))}r.d(e,{A:()=>a}),(0,r(60697).eW)(a,"populateCommonDb")},44691:function(t,e,r){r.d(e,{diagram:()=>tp});var a=r(4732),o=r(22934),i=r(60059),n=r(60697),c=r(62313),s=r(92147),l={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},d=n.vZ.gitGraph,h=(0,n.eW)(()=>(0,i.Rb)({...d,...(0,n.iE)().gitGraph}),"getConfig"),$=new o.A(()=>{let t=h(),e=t.mainBranchName,r=t.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:r}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}});function m(){return(0,i.MX)({length:7})}function g(t,e){let r=Object.create(null);return t.reduce((t,a)=>{let o=e(a);return r[o]||(r[o]=!0,t.push(a)),t},[])}(0,n.eW)(m,"getID"),(0,n.eW)(g,"uniqBy");var y=(0,n.eW)(function(t){$.records.direction=t},"setDirection"),p=(0,n.eW)(function(t){n.cM.debug("options str",t),t=(t=null==t?void 0:t.trim())||"{}";try{$.records.options=JSON.parse(t)}catch(t){n.cM.error("error while parsing gitGraph options",t.message)}},"setOptions"),u=(0,n.eW)(function(){return $.records.options},"getOptions"),x=(0,n.eW)(function(t){let e=t.msg,r=t.id,a=t.type,o=t.tags;n.cM.info("commit",e,r,a,o),n.cM.debug("Entering commit:",e,r,a,o);let i=h();r=n.SY.sanitizeText(r,i),e=n.SY.sanitizeText(e,i),o=null==o?void 0:o.map(t=>n.SY.sanitizeText(t,i));let c={id:r||$.records.seq+"-"+m(),message:e,seq:$.records.seq++,type:a??l.NORMAL,tags:o??[],parents:null==$.records.head?[]:[$.records.head.id],branch:$.records.currBranch};$.records.head=c,n.cM.info("main branch",i.mainBranchName),$.records.commits.set(c.id,c),$.records.branches.set($.records.currBranch,c.id),n.cM.debug("in pushCommit "+c.id)},"commit"),f=(0,n.eW)(function(t){let e=t.name,r=t.order;if(e=n.SY.sanitizeText(e,h()),$.records.branches.has(e))throw Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);$.records.branches.set(e,null!=$.records.head?$.records.head.id:null),$.records.branchConfig.set(e,{name:e,order:r}),w(e),n.cM.debug("in createBranch")},"branch"),b=(0,n.eW)(t=>{let e=t.branch,r=t.id,a=t.type,o=t.tags,i=h();e=n.SY.sanitizeText(e,i),r&&(r=n.SY.sanitizeText(r,i));let c=$.records.branches.get($.records.currBranch),s=$.records.branches.get(e),d=c?$.records.commits.get(c):void 0,g=s?$.records.commits.get(s):void 0;if(d&&g&&d.branch===e)throw Error(`Cannot merge branch '${e}' into itself.`);if($.records.currBranch===e){let t=Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(void 0===d||!d){let t=Error(`Incorrect usage of "merge". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},t}if(!$.records.branches.has(e)){let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},t}if(void 0===g||!g){let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},t}if(d===g){let t=Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(r&&$.records.commits.has(r)){let t=Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom Id");throw t.hash={text:`merge ${e} ${r} ${a} ${null==o?void 0:o.join(" ")}`,token:`merge ${e} ${r} ${a} ${null==o?void 0:o.join(" ")}`,expected:[`merge ${e} ${r}_UNIQUE ${a} ${null==o?void 0:o.join(" ")}`]},t}let y={id:r||`${$.records.seq}-${m()}`,message:`merged branch ${e} into ${$.records.currBranch}`,seq:$.records.seq++,parents:null==$.records.head?[]:[$.records.head.id,s||""],branch:$.records.currBranch,type:l.MERGE,customType:a,customId:!!r,tags:o??[]};$.records.head=y,$.records.commits.set(y.id,y),$.records.branches.set($.records.currBranch,y.id),n.cM.debug($.records.branches),n.cM.debug("in mergeBranch")},"merge"),v=(0,n.eW)(function(t){let e=t.id,r=t.targetId,a=t.tags,o=t.parent;n.cM.debug("Entering cherryPick:",e,r,a);let i=h();if(e=n.SY.sanitizeText(e,i),r=n.SY.sanitizeText(r,i),a=null==a?void 0:a.map(t=>n.SY.sanitizeText(t,i)),o=n.SY.sanitizeText(o,i),!e||!$.records.commits.has(e)){let t=Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let c=$.records.commits.get(e);if(void 0===c||!c)throw Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(o&&!(Array.isArray(c.parents)&&c.parents.includes(o)))throw Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let s=c.branch;if(c.type===l.MERGE&&!o)throw Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!r||!$.records.commits.has(r)){if(s===$.records.currBranch){let t=Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let t=$.records.branches.get($.records.currBranch);if(void 0===t||!t){let t=Error(`Incorrect usage of "cherry-pick". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let i=$.records.commits.get(t);if(void 0===i||!i){let t=Error(`Incorrect usage of "cherry-pick". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let d={id:$.records.seq+"-"+m(),message:`cherry-picked ${null==c?void 0:c.message} into ${$.records.currBranch}`,seq:$.records.seq++,parents:null==$.records.head?[]:[$.records.head.id,c.id],branch:$.records.currBranch,type:l.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${c.id}${c.type===l.MERGE?`|parent:${o}`:""}`]};$.records.head=d,$.records.commits.set(d.id,d),$.records.branches.set($.records.currBranch,d.id),n.cM.debug($.records.branches),n.cM.debug("in cherryPick")}},"cherryPick"),w=(0,n.eW)(function(t){if(t=n.SY.sanitizeText(t,h()),$.records.branches.has(t)){$.records.currBranch=t;let e=$.records.branches.get($.records.currBranch);void 0!==e&&e?$.records.head=$.records.commits.get(e)??null:$.records.head=null}else{let e=Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw e.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},e}},"checkout");function B(t,e,r){let a=t.indexOf(e);-1===a?t.push(r):t.splice(a,1,r)}function E(t){let e=t.reduce((t,e)=>t.seq>e.seq?t:e,t[0]),r="";t.forEach(function(t){t===e?r+="	*":r+="	|"});let a=[r,e.id,e.seq];for(let t in $.records.branches)$.records.branches.get(t)===e.id&&a.push(t);if(n.cM.debug(a.join(" ")),e.parents&&2==e.parents.length&&e.parents[0]&&e.parents[1]){let r=$.records.commits.get(e.parents[0]);B(t,e,r),e.parents[1]&&t.push($.records.commits.get(e.parents[1]))}else if(0==e.parents.length)return;else if(e.parents[0]){let r=$.records.commits.get(e.parents[0]);B(t,e,r)}E(t=g(t,t=>t.id))}(0,n.eW)(B,"upsert"),(0,n.eW)(E,"prettyPrintCommitHistory");var k=(0,n.eW)(function(){n.cM.debug($.records.commits),E([W()[0]])},"prettyPrint"),M=(0,n.eW)(function(){$.reset(),(0,n.ZH)()},"clear"),C=(0,n.eW)(function(){return[...$.records.branchConfig.values()].map((t,e)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${e}`)}).sort((t,e)=>(t.order??0)-(e.order??0)).map(t=>{let{name:e}=t;return{name:e}})},"getBranchesAsObjArray"),L=(0,n.eW)(function(){return $.records.branches},"getBranches"),T=(0,n.eW)(function(){return $.records.commits},"getCommits"),W=(0,n.eW)(function(){let t=[...$.records.commits.values()];return t.forEach(function(t){n.cM.debug(t.id)}),t.sort((t,e)=>t.seq-e.seq),t},"getCommitsArray"),R={commitType:l,getConfig:h,setDirection:y,setOptions:p,getOptions:u,commit:x,branch:f,merge:b,cherryPick:v,checkout:w,prettyPrint:k,clear:M,getBranchesAsObjArray:C,getBranches:L,getCommits:T,getCommitsArray:W,getCurrentBranch:(0,n.eW)(function(){return $.records.currBranch},"getCurrentBranch"),getDirection:(0,n.eW)(function(){return $.records.direction},"getDirection"),getHead:(0,n.eW)(function(){return $.records.head},"getHead"),setAccTitle:n.GN,getAccTitle:n.eu,getAccDescription:n.Mx,setAccDescription:n.U$,setDiagramTitle:n.g2,getDiagramTitle:n.Kr},P=(0,n.eW)((t,e)=>{for(let r of((0,a.A)(t,e),t.dir&&e.setDirection(t.dir),t.statements))A(r,e)},"populate"),A=(0,n.eW)((t,e)=>{let r={Commit:(0,n.eW)(t=>e.commit(I(t)),"Commit"),Branch:(0,n.eW)(t=>e.branch(G(t)),"Branch"),Merge:(0,n.eW)(t=>e.merge(S(t)),"Merge"),Checkout:(0,n.eW)(t=>e.checkout(O(t)),"Checkout"),CherryPicking:(0,n.eW)(t=>e.cherryPick(q(t)),"CherryPicking")}[t.$type];r?r(t):n.cM.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),I=(0,n.eW)(t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?l[t.type]:l.NORMAL,tags:t.tags??void 0}),"parseCommit"),G=(0,n.eW)(t=>({name:t.name,order:t.order??0}),"parseBranch"),S=(0,n.eW)(t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?l[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),O=(0,n.eW)(t=>t.branch,"parseCheckout"),q=(0,n.eW)(t=>{var e;return{id:t.id,targetId:"",tags:(null===(e=t.tags)||void 0===e?void 0:e.length)===0?void 0:t.tags,parent:t.parent}},"parseCherryPicking"),H={parse:(0,n.eW)(async t=>{let e=await (0,c.Qc)("gitGraph",t);n.cM.debug(e),P(e,R)},"parse")},z=(0,n.nV)(),Y=null==z?void 0:z.gitGraph,D=new Map,N=new Map,j=new Map,K=[],F=0,_="LR",U=(0,n.eW)(()=>{D.clear(),N.clear(),j.clear(),F=0,K=[],_="LR"},"clear"),V=(0,n.eW)(t=>{let e=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(t=>{let r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=t.trim(),e.appendChild(r)}),e},"drawText"),Q=(0,n.eW)(t=>{let e,r,a;return"BT"===_?(r=(0,n.eW)((t,e)=>t<=e,"comparisonFunc"),a=1/0):(r=(0,n.eW)((t,e)=>t>=e,"comparisonFunc"),a=0),t.forEach(t=>{var o,i;let n="TB"===_||"BT"==_?null===(o=N.get(t))||void 0===o?void 0:o.y:null===(i=N.get(t))||void 0===i?void 0:i.x;void 0!==n&&r(n,a)&&(e=t,a=n)}),e},"findClosestParent"),X=(0,n.eW)(t=>{let e="",r=1/0;return t.forEach(t=>{let a=N.get(t).y;a<=r&&(e=t,r=a)}),e||void 0},"findClosestParentBT"),Z=(0,n.eW)((t,e,r)=>{let a=r,o=r,i=[];t.forEach(t=>{let r=e.get(t);if(!r)throw Error(`Commit not found for key ${t}`);r.parents.length?o=Math.max(a=tt(r),o):i.push(r),te(r,a)}),a=o,i.forEach(t=>{tr(t,a,r)}),t.forEach(t=>{let r=e.get(t);if(null==r?void 0:r.parents.length){let t=X(r.parents);(a=N.get(t).y-40)<=o&&(o=a);let e=D.get(r.branch).pos,i=a-10;N.set(r.id,{x:e,y:i})}})},"setParallelBTPos"),J=(0,n.eW)(t=>{var e;let r=Q(t.parents.filter(t=>null!==t));if(!r)throw Error(`Closest parent not found for commit ${t.id}`);let a=null===(e=N.get(r))||void 0===e?void 0:e.y;if(void 0===a)throw Error(`Closest parent position not found for commit ${t.id}`);return a},"findClosestParentPos"),tt=(0,n.eW)(t=>J(t)+40,"calculateCommitPosition"),te=(0,n.eW)((t,e)=>{let r=D.get(t.branch);if(!r)throw Error(`Branch not found for commit ${t.id}`);let a=r.pos,o=e+10;return N.set(t.id,{x:a,y:o}),{x:a,y:o}},"setCommitPosition"),tr=(0,n.eW)((t,e,r)=>{let a=D.get(t.branch);if(!a)throw Error(`Branch not found for commit ${t.id}`);let o=a.pos;N.set(t.id,{x:o,y:e+r})},"setRootPosition"),ta=(0,n.eW)((t,e,r,a,o,i)=>{if(i===l.HIGHLIGHT)t.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${o%8} ${a}-outer`),t.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${o%8} ${a}-inner`);else if(i===l.CHERRY_PICK)t.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`);else{let n=t.append("circle");if(n.attr("cx",r.x),n.attr("cy",r.y),n.attr("r",e.type===l.MERGE?9:10),n.attr("class",`commit ${e.id} commit${o%8}`),i===l.MERGE){let i=t.append("circle");i.attr("cx",r.x),i.attr("cy",r.y),i.attr("r",6),i.attr("class",`commit ${a} ${e.id} commit${o%8}`)}i===l.REVERSE&&t.append("path").attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${a} ${e.id} commit${o%8}`)}},"drawCommitBullet"),to=(0,n.eW)((t,e,r,a)=>{if(e.type!==l.CHERRY_PICK&&(e.customId&&e.type===l.MERGE||e.type!==l.MERGE)&&(null==Y?void 0:Y.showCommitLabel)){var o;let i=t.append("g"),n=i.insert("rect").attr("class","commit-label-bkg"),c=i.append("text").attr("x",a).attr("y",r.y+25).attr("class","commit-label").text(e.id),s=null===(o=c.node())||void 0===o?void 0:o.getBBox();if(s&&(n.attr("x",r.posWithOffset-s.width/2-2).attr("y",r.y+13.5).attr("width",s.width+4).attr("height",s.height+4),"TB"===_||"BT"===_?(n.attr("x",r.x-(s.width+16+5)).attr("y",r.y-12),c.attr("x",r.x-(s.width+16)).attr("y",r.y+s.height-12)):c.attr("x",r.posWithOffset-s.width/2),Y.rotateCommitLabel)){if("TB"===_||"BT"===_)c.attr("transform","rotate(-45, "+r.x+", "+r.y+")"),n.attr("transform","rotate(-45, "+r.x+", "+r.y+")");else{let t=-7.5-(s.width+10)/25*9.5,e=10+s.width/25*8.5;i.attr("transform","translate("+t+", "+e+") rotate(-45, "+a+", "+r.y+")")}}}},"drawCommitLabel"),ti=(0,n.eW)((t,e,r,a)=>{if(e.tags.length>0){let i=0,n=0,c=0,s=[];for(let a of e.tags.reverse()){var o;let e=t.insert("polygon"),l=t.append("circle"),d=t.append("text").attr("y",r.y-16-i).attr("class","tag-label").text(a),h=null===(o=d.node())||void 0===o?void 0:o.getBBox();if(!h)throw Error("Tag bbox not found");n=Math.max(n,h.width),c=Math.max(c,h.height),d.attr("x",r.posWithOffset-h.width/2),s.push({tag:d,hole:l,rect:e,yOffset:i}),i+=20}for(let{tag:t,hole:e,rect:o,yOffset:i}of s){let s=c/2,l=r.y-19.2-i;if(o.attr("class","tag-label-bkg").attr("points",`
      ${a-n/2-2},${l+2}  
      ${a-n/2-2},${l-2}
      ${r.posWithOffset-n/2-4},${l-s-2}
      ${r.posWithOffset+n/2+4},${l-s-2}
      ${r.posWithOffset+n/2+4},${l+s+2}
      ${r.posWithOffset-n/2-4},${l+s+2}`),e.attr("cy",l).attr("cx",a-n/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===_||"BT"===_){let c=a+i;o.attr("class","tag-label-bkg").attr("points",`
        ${r.x},${c+2}
        ${r.x},${c-2}
        ${r.x+10},${c-s-2}
        ${r.x+10+n+4},${c-s-2}
        ${r.x+10+n+4},${c+s+2}
        ${r.x+10},${c+s+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),e.attr("cx",r.x+2).attr("cy",c).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),t.attr("x",r.x+5).attr("y",c+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+a+")")}}}},"drawCommitTags"),tn=(0,n.eW)(t=>{switch(t.customType??t.type){case l.NORMAL:return"commit-normal";case l.REVERSE:return"commit-reverse";case l.HIGHLIGHT:return"commit-highlight";case l.MERGE:return"commit-merge";case l.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),tc=(0,n.eW)((t,e,r,a)=>{let o={x:0,y:0};if(t.parents.length>0){let r=Q(t.parents);if(r){let i=a.get(r)??o;return"TB"===e?i.y+40:"BT"===e?(a.get(t.id)??o).y-40:i.x+40}}else{if("TB"===e)return 30;if("BT"===e)return(a.get(t.id)??o).y-40}return 0},"calculatePosition"),ts=(0,n.eW)((t,e,r)=>{var a,o;let i="BT"===_&&r?e:e+10,n="TB"===_||"BT"===_?i:null===(a=D.get(t.branch))||void 0===a?void 0:a.pos,c="TB"===_||"BT"===_?null===(o=D.get(t.branch))||void 0===o?void 0:o.pos:i;if(void 0===c||void 0===n)throw Error(`Position were undefined for commit ${t.id}`);return{x:c,y:n,posWithOffset:i}},"getCommitPosition"),tl=(0,n.eW)((t,e,r)=>{if(!Y)throw Error("GitGraph config not found");let a=t.append("g").attr("class","commit-bullets"),o=t.append("g").attr("class","commit-labels"),i=30*("TB"===_||"BT"===_),c=[...e.keys()],s=(null==Y?void 0:Y.parallelCommits)??!1,l=c.sort((0,n.eW)((t,r)=>{var a,o;let i=null===(a=e.get(t))||void 0===a?void 0:a.seq,n=null===(o=e.get(r))||void 0===o?void 0:o.seq;return void 0!==i&&void 0!==n?i-n:0},"sortKeys"));"BT"===_&&(s&&Z(l,e,i),l=l.reverse()),l.forEach(t=>{let n=e.get(t);if(!n)throw Error(`Commit not found for key ${t}`);s&&(i=tc(n,_,i,N));let c=ts(n,i,s);if(r){var l;let t=tn(n),e=n.customType??n.type,r=(null===(l=D.get(n.branch))||void 0===l?void 0:l.index)??0;ta(a,n,c,t,r,e),to(o,n,c,i),ti(o,n,c,i)}"TB"===_||"BT"===_?N.set(n.id,{x:c.x,y:c.posWithOffset}):N.set(n.id,{x:c.posWithOffset,y:c.y}),(i="BT"===_&&s?i+40:i+40+10)>F&&(F=i)})},"drawCommits"),td=(0,n.eW)((t,e,r,a,o)=>{let i=("TB"===_||"BT"===_?r.x<a.x:r.y<a.y)?e.branch:t.branch,c=(0,n.eW)(t=>t.branch===i,"isOnBranchToGetCurve"),s=(0,n.eW)(r=>r.seq>t.seq&&r.seq<e.seq,"isBetweenCommits");return[...o.values()].some(t=>s(t)&&c(t))},"shouldRerouteArrow"),th=(0,n.eW)(function(t,e){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=t+Math.abs(t-e)/2;if(r>5)return a;if(K.every(t=>Math.abs(t-a)>=10))return K.push(a),a;let o=Math.abs(t-e);return th(t,e-o/5,r+1)},"findLane"),t$=(0,n.eW)((t,e,r,a)=>{var o,i,n,c,s;let d;let h=N.get(e.id),$=N.get(r.id);if(void 0===h||void 0===$)throw Error(`Commit positions not found for commits ${e.id} and ${r.id}`);let m=td(e,r,h,$,a),g="",y="",p=0,u=0,x=null===(o=D.get(r.branch))||void 0===o?void 0:o.index;if(r.type===l.MERGE&&e.id!==r.parents[0]&&(x=null===(i=D.get(e.branch))||void 0===i?void 0:i.index),m){g="A 10 10, 0, 0, 0,",y="A 10 10, 0, 0, 1,",p=10,u=10;let t=h.y<$.y?th(h.y,$.y):th($.y,h.y),r=h.x<$.x?th(h.x,$.x):th($.x,h.x);"TB"===_?h.x<$.x?d=`M ${h.x} ${h.y} L ${r-p} ${h.y} ${y} ${r} ${h.y+u} L ${r} ${$.y-p} ${g} ${r+u} ${$.y} L ${$.x} ${$.y}`:(x=null===(n=D.get(e.branch))||void 0===n?void 0:n.index,d=`M ${h.x} ${h.y} L ${r+p} ${h.y} ${g} ${r} ${h.y+u} L ${r} ${$.y-p} ${y} ${r-u} ${$.y} L ${$.x} ${$.y}`):"BT"===_?h.x<$.x?d=`M ${h.x} ${h.y} L ${r-p} ${h.y} ${g} ${r} ${h.y-u} L ${r} ${$.y+p} ${y} ${r+u} ${$.y} L ${$.x} ${$.y}`:(x=null===(c=D.get(e.branch))||void 0===c?void 0:c.index,d=`M ${h.x} ${h.y} L ${r+p} ${h.y} ${y} ${r} ${h.y-u} L ${r} ${$.y+p} ${g} ${r-u} ${$.y} L ${$.x} ${$.y}`):h.y<$.y?d=`M ${h.x} ${h.y} L ${h.x} ${t-p} ${g} ${h.x+u} ${t} L ${$.x-p} ${t} ${y} ${$.x} ${t+u} L ${$.x} ${$.y}`:(x=null===(s=D.get(e.branch))||void 0===s?void 0:s.index,d=`M ${h.x} ${h.y} L ${h.x} ${t+p} ${y} ${h.x+u} ${t} L ${$.x-p} ${t} ${g} ${$.x} ${t-u} L ${$.x} ${$.y}`)}else g="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",p=20,u=20,"TB"===_?(h.x<$.x&&(d=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${$.y-p} ${g} ${h.x+u} ${$.y} L ${$.x} ${$.y}`:`M ${h.x} ${h.y} L ${$.x-p} ${h.y} ${y} ${$.x} ${h.y+u} L ${$.x} ${$.y}`),h.x>$.x&&(g="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",p=20,u=20,d=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${$.y-p} ${y} ${h.x-u} ${$.y} L ${$.x} ${$.y}`:`M ${h.x} ${h.y} L ${$.x+p} ${h.y} ${g} ${$.x} ${h.y+u} L ${$.x} ${$.y}`),h.x===$.x&&(d=`M ${h.x} ${h.y} L ${$.x} ${$.y}`)):"BT"===_?(h.x<$.x&&(d=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${$.y+p} ${y} ${h.x+u} ${$.y} L ${$.x} ${$.y}`:`M ${h.x} ${h.y} L ${$.x-p} ${h.y} ${g} ${$.x} ${h.y-u} L ${$.x} ${$.y}`),h.x>$.x&&(g="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",p=20,u=20,d=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${$.y+p} ${g} ${h.x-u} ${$.y} L ${$.x} ${$.y}`:`M ${h.x} ${h.y} L ${$.x-p} ${h.y} ${g} ${$.x} ${h.y-u} L ${$.x} ${$.y}`),h.x===$.x&&(d=`M ${h.x} ${h.y} L ${$.x} ${$.y}`)):(h.y<$.y&&(d=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${h.x} ${h.y} L ${$.x-p} ${h.y} ${y} ${$.x} ${h.y+u} L ${$.x} ${$.y}`:`M ${h.x} ${h.y} L ${h.x} ${$.y-p} ${g} ${h.x+u} ${$.y} L ${$.x} ${$.y}`),h.y>$.y&&(d=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${h.x} ${h.y} L ${$.x-p} ${h.y} ${g} ${$.x} ${h.y-u} L ${$.x} ${$.y}`:`M ${h.x} ${h.y} L ${h.x} ${$.y+p} ${y} ${h.x+u} ${$.y} L ${$.x} ${$.y}`),h.y===$.y&&(d=`M ${h.x} ${h.y} L ${$.x} ${$.y}`));if(void 0===d)throw Error("Line definition not found");t.append("path").attr("d",d).attr("class","arrow arrow"+x%8)},"drawArrow"),tm=(0,n.eW)((t,e)=>{let r=t.append("g").attr("class","commit-arrows");[...e.keys()].forEach(t=>{let a=e.get(t);a.parents&&a.parents.length>0&&a.parents.forEach(t=>{t$(r,e.get(t),a,e)})})},"drawArrows"),tg=(0,n.eW)((t,e)=>{let r=t.append("g");e.forEach((t,e)=>{var a;let o=e%8,i=null===(a=D.get(t.name))||void 0===a?void 0:a.pos;if(void 0===i)throw Error(`Position not found for branch ${t.name}`);let n=r.append("line");n.attr("x1",0),n.attr("y1",i),n.attr("x2",F),n.attr("y2",i),n.attr("class","branch branch"+o),"TB"===_?(n.attr("y1",30),n.attr("x1",i),n.attr("y2",F),n.attr("x2",i)):"BT"===_&&(n.attr("y1",F),n.attr("x1",i),n.attr("y2",30),n.attr("x2",i)),K.push(i);let c=V(t.name),s=r.insert("rect"),l=r.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+o);l.node().appendChild(c);let d=c.getBBox();s.attr("class","branchLabelBkg label"+o).attr("rx",4).attr("ry",4).attr("x",-d.width-4-30*((null==Y?void 0:Y.rotateCommitLabel)===!0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),l.attr("transform","translate("+(-d.width-14-30*((null==Y?void 0:Y.rotateCommitLabel)===!0))+", "+(i-d.height/2-1)+")"),"TB"===_?(s.attr("x",i-d.width/2-10).attr("y",0),l.attr("transform","translate("+(i-d.width/2-5)+", 0)")):"BT"===_?(s.attr("x",i-d.width/2-10).attr("y",F),l.attr("transform","translate("+(i-d.width/2-5)+", "+F+")")):s.attr("transform","translate(-19, "+(i-d.height/2)+")")})},"drawBranches"),ty=(0,n.eW)(function(t,e,r,a,o){return D.set(t,{pos:e,index:r}),e+=50+40*!!o+("TB"===_||"BT"===_?a.width/2:0)},"setBranchPosition"),tp={parser:H,db:R,renderer:{draw:(0,n.eW)(function(t,e,r,a){if(U(),n.cM.debug("in gitgraph renderer",t+"\n","id:",e,r),!Y)throw Error("GitGraph config not found");let o=Y.rotateCommitLabel??!1,c=a.db;j=c.getCommits();let l=c.getBranchesAsObjArray();_=c.getDirection();let d=(0,s.Ys)(`[id="${e}"]`),h=0;l.forEach((t,e)=>{var r;let a=V(t.name),i=d.append("g"),n=i.insert("g").attr("class","branchLabel"),c=n.insert("g").attr("class","label branch-label");null===(r=c.node())||void 0===r||r.appendChild(a);let s=a.getBBox();h=ty(t.name,h,e,s,o),c.remove(),n.remove(),i.remove()}),tl(d,j,!1),Y.showBranches&&tg(d,l),tm(d,j),tl(d,j,!0),i.w8.insertTitle(d,"gitTitleText",Y.titleTopMargin??0,c.getDiagramTitle()),(0,n.Rw)(void 0,d,Y.diagramPadding,Y.useMaxWidth)},"draw")},styles:(0,n.eW)(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(e=>`
        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }
        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }
        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }
        .label${e}  { fill: ${t["git"+e]}; }
        .arrow${e} { stroke: ${t["git"+e]}; }
        `).join("\n")}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles")}}}]);